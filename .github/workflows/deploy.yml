# 워크플로우의 이름
name: Deploy Server to Docker Hub & EC2

# 실행 조건 (main 브랜치에 push)
on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    name: Build and Deploy Server
    runs-on: ubuntu-latest
    env:
      DOCKER_IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/handwriting-app-server

    steps:
      # 1. 소스 코드 체크아웃
      - name: Checkout source code
        uses: actions/checkout@v3

      # 2. Docker Hub에 로그인
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 3. 이미지 태그를 동적으로 생성 (커밋 해시)
      - name: Define image tag
        id: image
        run: echo "tag=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      # 4. Docker 이미지 빌드 및 Docker Hub에 푸시
      - name: Build and push to Docker Hub
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ env.DOCKER_IMAGE_NAME }}:${{ steps.image.outputs.tag }}

      # 5. EC2에 SSH로 접속하여 배포 스크립트 실행
      - name: Deploy to EC2 instance
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # 1. 소스 코드 폴더로 이동합니다.
            cd ~/writingCollection_model

            # 2. GitHub 저장소에서 최신 변경사항을 받아옵니다.
            git pull origin main

            # --------------------------------------------------------------------
            # 3. docker-compose가 사용할 .env 파일을 모든 Secrets를 포함하여 동적으로 생성합니다.

            
            # Docker 이미지 정보 (파일 새로 생성)
            echo "DOCKER_IMAGE_NAME=${{ env.DOCKER_IMAGE_NAME }}" > .env
            echo "IMAGE_TAG=${{ steps.image.outputs.tag }}" >> .env
            
            # PostgreSQL 데이터베이스 접속 정보 (파일에 내용 추가)
            echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> .env
            echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env
            echo "POSTGRES_DB=${{ secrets.POSTGRES_DB }}" >> .env
            
            # JWT 비밀 정보
            echo "JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}" >> .env
            echo "JWT_ALGORITHM=${{ secrets.JWT_ALGORITHM }}" >> .env
            echo "JWT_ACCESS_EXPIRE_MINUTES=${{ secrets.JWT_ACCESS_EXPIRE_MINUTES }}" >> .env

            # Gemini Key 설정
            echo "GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}" >> .env
            
            # 기타 애플리케이션 설정
            echo "STATIC_PROFILE_DIR=/app/static/profile" >> .env
            echo "PUBLIC_BASE_URL=${{ secrets.PUBLIC_BASE_URL }}" >> .env
            
            echo "--- .env file created successfully ---"
            # --------------------------------------------------------------------
            sync
            sleep 2
            
            # 4. Firebase 인증 키 파일 생성
            echo "${{ secrets.FIREBASE_CREDENTIALS_BASE64 }}" | base64 --decode > ./serviceAccountKey.json

            sudo chcon -t container_file_t ./serviceAccountKey.json
            sudo chcon -t container_file_t ./nginx.conf
            sudo chcon -t container_file_t -R ./certs

            
            # 5. Docker Hub 로그인
            docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_TOKEN }}

            # 6. 최신 이미지 pull 및 서버 재시작
            docker-compose pull
            docker-compose up -d --force-recreate

            # 7. 오래된 이미지 정리
            docker image prune -f